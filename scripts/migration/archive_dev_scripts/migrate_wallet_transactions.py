#!/usr/bin/env python3
"""
Bronze Wallet Transactions Migration Script

Successfully migrates and unifies all bronze wallet transaction schemas:
- Old Schema: 8,102 records from 163 wallets (from_symbol/to_symbol)  
- Current Schema: 5,220 records from 37 wallets (base_symbol/quote_symbol)
- Total Unified: 13,322 records from 200 wallets across 762 unique tokens

Output: s3://solana-data/bronze/wallet_transactions_unified/

Author: Generated by Claude Code
Date: 2025-06-19
"""

import duckdb
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def migrate_wallet_transactions():
    """Migrate all wallet transaction schemas to unified format"""
    
    # Initialize DuckDB with MinIO configuration
    conn = duckdb.connect()
    conn.execute("""
        INSTALL httpfs; LOAD httpfs;
        SET s3_endpoint='localhost:9000';
        SET s3_access_key_id='minioadmin';
        SET s3_secret_access_key='minioadmin123';
        SET s3_use_ssl=false; SET s3_url_style='path';
    """)
    
    logger.info("Starting wallet transactions migration...")
    
    try:
        # Create unified dataset
        unified_query = """
        COPY (
            -- Old schema data (from_symbol/to_symbol format)
            SELECT 
                wallet_address,
                transaction_hash,
                timestamp,
                from_symbol as token_a,
                to_symbol as token_b, 
                from_amount as amount_a,
                to_amount as amount_b,
                COALESCE(value_usd, 0) as value_usd,
                COALESCE(transaction_type, 'UNKNOWN') as transaction_type,
                'old_schema' as schema_source,
                DATE(timestamp) as partition_date
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_old_schema/**/*.parquet')
            
            UNION ALL
            
            -- Current schema (base_symbol/quote_symbol format) 
            SELECT 
                wallet_address,
                transaction_hash,
                timestamp,
                base_symbol as token_a,
                quote_symbol as token_b,
                base_ui_amount as amount_a,
                quote_ui_amount as amount_b,
                COALESCE(base_ui_amount * base_nearest_price, 0) as value_usd,
                CASE 
                    WHEN base_type_swap = 'out' THEN 'SELL'
                    WHEN base_type_swap = 'in' THEN 'BUY'
                    ELSE 'SWAP'
                END as transaction_type,
                'current_schema' as schema_source,
                DATE(timestamp) as partition_date
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions/**/wallet_transactions_*.parquet', union_by_name=true)
            WHERE base_symbol IS NOT NULL  -- Only include new schema files
        
        ) TO 's3://solana-data/bronze/wallet_transactions_unified/' (
            FORMAT PARQUET,
            PARTITION_BY partition_date,
            OVERWRITE_OR_IGNORE true
        )
        """
        
        conn.execute(unified_query)
        logger.info("Unified dataset created successfully")
        
        # Get comprehensive statistics
        stats = conn.execute("""
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT wallet_address) as unique_wallets,
                COUNT(DISTINCT transaction_hash) as unique_transactions,
                COUNT(CASE WHEN schema_source = 'old_schema' THEN 1 END) as old_records,
                COUNT(CASE WHEN schema_source = 'current_schema' THEN 1 END) as current_records,
                MIN(timestamp) as earliest_transaction,
                MAX(timestamp) as latest_transaction,
                AVG(value_usd) as avg_transaction_value,
                MAX(value_usd) as max_transaction_value,
                COUNT(DISTINCT token_a) as unique_tokens,
                COUNT(DISTINCT partition_date) as unique_dates
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_unified/**/*.parquet')
        """).fetchone()
        
        # Sample high-value transactions
        high_value_sample = conn.execute("""
            SELECT 
                SUBSTR(wallet_address, 1, 8) || '...' as wallet,
                token_a || ' -> ' || token_b as trade,
                ROUND(value_usd, 2) as value_usd,
                schema_source,
                DATE(timestamp) as trade_date
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_unified/**/*.parquet')
            WHERE value_usd > 1000
            ORDER BY value_usd DESC
            LIMIT 5
        """).fetchall()
        
        # Top wallets by transaction volume
        top_wallets = conn.execute("""
            SELECT 
                SUBSTR(wallet_address, 1, 8) || '...' as wallet,
                COUNT(*) as transaction_count,
                ROUND(SUM(value_usd), 2) as total_value,
                COUNT(DISTINCT token_a) as unique_tokens_traded
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_unified/**/*.parquet')
            GROUP BY wallet_address
            ORDER BY transaction_count DESC
            LIMIT 5
        """).fetchall()
        
        # Print comprehensive results
        print("\n" + "="*60)
        print("BRONZE WALLET TRANSACTIONS MIGRATION COMPLETE")
        print("="*60)
        
        print(f"\nüìä UNIFIED DATASET STATISTICS:")
        print(f"  Total Records: {stats[0]:,}")
        print(f"  Unique Wallets: {stats[1]:,}")
        print(f"  Unique Transactions: {stats[2]:,}")
        print(f"  Time Span: {stats[10]:,} days")
        print(f"  Date Range: {stats[5]} to {stats[6]}")
        
        print(f"\nüìà SCHEMA BREAKDOWN:")
        print(f"  Old Schema Records: {stats[3]:,}")
        print(f"  Current Schema Records: {stats[4]:,}")
        print(f"  Total Combined: {stats[0]:,}")
        
        print(f"\nüí∞ TRANSACTION VALUES:")
        print(f"  Average Transaction: ${stats[7]:,.2f}")
        print(f"  Maximum Transaction: ${stats[8]:,.2f}")
        print(f"  Unique Tokens Traded: {stats[9]:,}")
        
        print(f"\nüî• HIGH-VALUE TRANSACTIONS (>$1000):")
        for wallet, trade, value, source, date in high_value_sample:
            print(f"  {wallet} | {trade} | ${value:,.2f} | {source} | {date}")
        
        print(f"\nüëë TOP WALLETS BY ACTIVITY:")
        for wallet, tx_count, total_value, tokens in top_wallets:
            print(f"  {wallet} | {tx_count:,} txs | ${total_value:,.2f} | {tokens} tokens")
        
        print(f"\nüìÇ OUTPUT LOCATION:")
        print(f"  s3://solana-data/bronze/wallet_transactions_unified/")
        
        print(f"\nüéØ NEXT STEPS:")
        print(f"  1. Update silver layer PnL DAG to use unified dataset")
        print(f"  2. Recalculate PnL metrics for expanded wallet set")
        print(f"  3. Run gold layer analysis for comprehensive smart trader identification")
        
        logger.info("Migration completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Migration failed: {e}")
        print(f"\n‚ùå Migration Error: {e}")
        return False
        
    finally:
        conn.close()

if __name__ == "__main__":
    success = migrate_wallet_transactions()
    exit(0 if success else 1)