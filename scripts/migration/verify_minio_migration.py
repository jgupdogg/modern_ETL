#!/usr/bin/env python3
"""
MinIO Migration Verification Script

Verifies that the bronze wallet trade history migration completed
by counting files and checking MinIO directly.

Author: Generated by Claude Code
Date: 2025-06-19
"""

import boto3
import json
from collections import defaultdict

def main():
    # MinIO client
    s3_client = boto3.client(
        's3',
        endpoint_url='http://localhost:9000',
        aws_access_key_id='minioadmin',
        aws_secret_access_key='minioadmin123',
        region_name='us-east-1'
    )
    
    bucket = 'solana-data'
    prefix = 'bronze/wallet_trade_history_bronze_fixed/'
    
    print("\n" + "="*60)
    print("BRONZE MIGRATION VERIFICATION")
    print("="*60)
    
    try:
        # List all objects in the migration path
        paginator = s3_client.get_paginator('list_objects_v2')
        page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
        
        files_by_date = defaultdict(int)
        total_files = 0
        total_size = 0
        
        for page in page_iterator:
            if 'Contents' in page:
                for obj in page['Contents']:
                    key = obj['Key']
                    size = obj['Size']
                    
                    # Extract date from key (date=YYYY-MM-DD format)
                    if 'date=' in key:
                        date_part = key.split('date=')[1].split('/')[0]
                        files_by_date[date_part] += 1
                    
                    total_files += 1
                    total_size += size
        
        print(f"\nüìä MIGRATION VERIFICATION RESULTS:")
        print(f"  Bucket: {bucket}")
        print(f"  Path: {prefix}")
        print(f"  Total Files: {total_files:,}")
        print(f"  Total Size: {total_size / (1024**3):.2f} GB")
        print(f"  Unique Dates: {len(files_by_date):,}")
        
        if total_files > 0:
            # Show date distribution
            print(f"\nüìÖ FILES BY DATE (showing first 10):")
            sorted_dates = sorted(files_by_date.items())[:10]
            for date, count in sorted_dates:
                print(f"  {date}: {count:,} files")
            
            if len(files_by_date) > 10:
                print(f"  ... and {len(files_by_date) - 10} more dates")
            
            # Estimate records based on batch size
            estimated_records = total_files * 25000  # 25K records per batch
            print(f"\nüìà ESTIMATED STATISTICS:")
            print(f"  Estimated Records: ~{estimated_records:,}")
            print(f"  Expected Records: 3,620,060")
            
            if estimated_records >= 3600000:
                print(f"  Status: ‚úÖ MIGRATION APPEARS COMPLETE")
            else:
                print(f"  Status: ‚ö†Ô∏è  PARTIAL MIGRATION ({estimated_records/3620060*100:.1f}%)")
        else:
            print(f"\n‚ùå NO FILES FOUND")
            print(f"  The migration may have failed or used a different path")
            
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        print(f"  MinIO may not be running on localhost:9000")
        print(f"  Or the bucket/path may not exist")

if __name__ == "__main__":
    main()