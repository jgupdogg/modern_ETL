#!/usr/bin/env python3
"""
Fixed Improved Bronze Wallet Transactions Migration Script

Properly calculates USD values for NULL records and preserves all price fields.
Uses only available columns from each schema.

Author: Generated by Claude Code  
Date: 2025-06-19
"""

import duckdb
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def migrate_wallet_transactions_fixed():
    """Fixed migration with proper column references"""
    
    conn = duckdb.connect()
    conn.execute("""
        INSTALL httpfs; LOAD httpfs;
        SET s3_endpoint='localhost:9000';
        SET s3_access_key_id='minioadmin';
        SET s3_secret_access_key='minioadmin123';
        SET s3_use_ssl=false; SET s3_url_style='path';
    """)
    
    logger.info("Starting fixed improved migration...")
    
    try:
        unified_query = """
        COPY (
            -- Old schema data with improved USD calculation
            SELECT 
                -- Core fields
                wallet_address,
                transaction_hash,
                timestamp,
                block_unix_time as block_slot,
                
                -- Token fields
                from_symbol as token_a,
                to_symbol as token_b, 
                from_amount as amount_a,
                to_amount as amount_b,
                
                -- IMPROVED USD CALCULATION for NULL values
                CASE 
                    WHEN value_usd IS NOT NULL AND value_usd > 0 THEN value_usd
                    WHEN base_price > 0 AND from_amount > 0 THEN from_amount * base_price
                    WHEN quote_price > 0 AND to_amount > 0 THEN to_amount * quote_price
                    ELSE 0
                END as value_usd,
                
                -- Preserved price fields
                COALESCE(base_price, 0) as base_price,
                COALESCE(quote_price, 0) as quote_price,
                0 as nearest_price,  -- Not available in old schema
                
                -- Transaction metadata
                COALESCE(transaction_type, 'UNKNOWN') as transaction_type,
                0.0 as transaction_fee,
                true as success,
                '' as error_message,
                
                -- Processing fields (using actual old schema columns)
                COALESCE(fetched_at, CURRENT_TIMESTAMP) as processed_at,
                COALESCE(batch_id, 'unknown') as batch_id,
                COALESCE(processed_for_pnl, false) as processed_for_pnl,
                pnl_processed_at,
                COALESCE(pnl_processing_status, '') as pnl_processing_batch_id,  -- Map to available field
                
                -- Token details
                from_address as token_a_address,
                to_address as token_b_address,
                from_decimals as token_a_decimals,
                to_decimals as token_b_decimals,
                
                -- Migration metadata
                'old_schema_improved' as schema_version,
                'wallet_transactions_old_schema' as migration_source,
                CAST('2025-06-19T23:30:00Z' as TIMESTAMP) as migration_timestamp,
                DATE(timestamp) as partition_date
                
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_old_schema/**/*.parquet')
            
            UNION ALL
            
            -- Current schema data (only new format files)
            SELECT 
                -- Core fields
                wallet_address,
                transaction_hash,
                timestamp,
                block_unix_time as block_slot,
                
                -- Token fields 
                base_symbol as token_a,
                quote_symbol as token_b,
                base_ui_amount as amount_a,
                quote_ui_amount as amount_b,
                
                -- USD calculation
                COALESCE(base_ui_amount * base_nearest_price, quote_ui_amount * quote_nearest_price, 0) as value_usd,
                
                -- Price fields
                0 as base_price,  -- Not in new schema
                0 as quote_price,  -- Not in new schema
                COALESCE(base_nearest_price, quote_nearest_price, 0) as nearest_price,
                
                -- Transaction metadata
                CASE 
                    WHEN base_type_swap = 'out' AND quote_type_swap = 'in' THEN 'SELL'
                    WHEN base_type_swap = 'in' AND quote_type_swap = 'out' THEN 'BUY'
                    ELSE 'SWAP'
                END as transaction_type,
                0.0 as transaction_fee,
                true as success,
                '' as error_message,
                
                -- Processing fields (using actual current schema columns)
                COALESCE(fetched_at, CURRENT_TIMESTAMP) as processed_at,
                COALESCE(batch_id, 'unknown') as batch_id,
                COALESCE(processed_for_pnl, false) as processed_for_pnl,
                pnl_processed_at,
                COALESCE(pnl_processing_batch_id, '') as pnl_processing_batch_id,
                
                -- Token details
                base_address as token_a_address,
                quote_address as token_b_address,
                base_decimals as token_a_decimals,
                quote_decimals as token_b_decimals,
                
                -- Migration metadata
                'current_schema_enhanced' as schema_version,
                'wallet_transactions_current' as migration_source,
                CAST('2025-06-19T23:30:00Z' as TIMESTAMP) as migration_timestamp,
                DATE(timestamp) as partition_date
                
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions/**/wallet_transactions_*.parquet', union_by_name=true)
            WHERE base_symbol IS NOT NULL  -- Only new schema files
        
        ) TO 's3://solana-data/bronze/wallet_transactions_unified_v2/' (
            FORMAT PARQUET,
            PARTITION_BY partition_date,
            OVERWRITE_OR_IGNORE true
        )
        """
        
        conn.execute(unified_query)
        logger.info("Fixed unified dataset created successfully")
        
        # Get improvement statistics
        stats = conn.execute("""
            SELECT 
                COUNT(*) as total_records,
                COUNT(DISTINCT wallet_address) as unique_wallets,
                COUNT(CASE WHEN schema_version = 'old_schema_improved' THEN 1 END) as old_records,
                COUNT(CASE WHEN schema_version = 'current_schema_enhanced' THEN 1 END) as current_records,
                COUNT(CASE WHEN schema_version = 'old_schema_improved' AND value_usd > 0 THEN 1 END) as old_with_usd,
                COUNT(CASE WHEN schema_version = 'current_schema_enhanced' AND value_usd > 0 THEN 1 END) as current_with_usd,
                COUNT(CASE WHEN base_price > 0 THEN 1 END) as has_base_price,
                COUNT(CASE WHEN quote_price > 0 THEN 1 END) as has_quote_price,
                COUNT(CASE WHEN nearest_price > 0 THEN 1 END) as has_nearest_price,
                AVG(value_usd) as avg_value,
                MAX(value_usd) as max_value,
                COUNT(DISTINCT token_a) as unique_tokens
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_unified_v2/**/*.parquet')
        """).fetchone()
        
        # Compare with original old schema USD coverage
        original = conn.execute("""
            SELECT 
                COUNT(*) as orig_total,
                COUNT(CASE WHEN value_usd IS NOT NULL AND value_usd > 0 THEN 1 END) as orig_with_usd
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_old_schema/**/*.parquet')
        """).fetchone()
        
        # Sample improved transactions
        improved_sample = conn.execute("""
            SELECT 
                SUBSTR(wallet_address, 1, 8) || '...' as wallet,
                token_a || ' -> ' || token_b as trade,
                ROUND(amount_a, 4) as amount,
                ROUND(value_usd, 2) as calculated_usd,
                ROUND(base_price, 6) as base_price_used,
                DATE(timestamp) as trade_date
            FROM read_parquet('s3://solana-data/bronze/wallet_transactions_unified_v2/**/*.parquet')
            WHERE schema_version = 'old_schema_improved' AND value_usd > 50
            ORDER BY value_usd DESC
            LIMIT 5
        """).fetchall()
        
        # Extract stats
        (total, wallets, old_recs, curr_recs, old_usd, curr_usd, 
         has_base, has_quote, has_nearest, avg_val, max_val, tokens) = stats
        orig_total, orig_usd = original
        
        # Calculate improvements
        orig_rate = (orig_usd / orig_total * 100) if orig_total > 0 else 0
        new_rate = (old_usd / old_recs * 100) if old_recs > 0 else 0
        improvement = old_usd - orig_usd
        
        print("\n" + "="*65)
        print("FIXED IMPROVED MIGRATION RESULTS")
        print("="*65)
        
        print(f"\n📊 UNIFIED DATASET:")
        print(f"  Total Records: {total:,}")
        print(f"  Unique Wallets: {wallets:,}")
        print(f"  Unique Tokens: {tokens:,}")
        
        print(f"\n📈 SCHEMA BREAKDOWN:")
        print(f"  Old Schema (Improved): {old_recs:,}")
        print(f"  Current Schema: {curr_recs:,}")
        
        print(f"\n💰 USD VALUE IMPROVEMENT:")
        print(f"  Original Old USD Coverage: {orig_usd:,}/{orig_total:,} ({orig_rate:.1f}%)")
        print(f"  Improved Old USD Coverage: {old_usd:,}/{old_recs:,} ({new_rate:.1f}%)")
        print(f"  Additional USD Records: +{improvement:,}")
        print(f"  Improvement Factor: {new_rate/orig_rate:.1f}x better" if orig_rate > 0 else "  Massive improvement!")
        
        print(f"\n🔧 PRICE DATA PRESERVATION:")
        print(f"  Records with base_price: {has_base:,}")
        print(f"  Records with quote_price: {has_quote:,}")
        print(f"  Records with nearest_price: {has_nearest:,}")
        
        print(f"\n💎 VALUE STATISTICS:")
        print(f"  Average Transaction: ${avg_val:,.2f}")
        print(f"  Maximum Transaction: ${max_val:,.2f}")
        
        print(f"\n🔥 SAMPLE IMPROVED TRANSACTIONS:")
        for wallet, trade, amount, usd_val, base_p, date in improved_sample:
            print(f"  {wallet} | {trade} | {amount} → ${usd_val:,.2f} | base:${base_p} | {date}")
        
        print(f"\n📂 OUTPUT:")
        print(f"  Location: s3://solana-data/bronze/wallet_transactions_unified_v2/")
        print(f"  ✅ Ready for enhanced PnL calculations!")
        
        return True
        
    except Exception as e:
        logger.error(f"Migration failed: {e}")
        print(f"❌ Error: {e}")
        return False
        
    finally:
        conn.close()

if __name__ == "__main__":
    success = migrate_wallet_transactions_fixed()
    exit(0 if success else 1)